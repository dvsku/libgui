FILE(GLOB_RECURSE LIBGUI_LIB_SOURCE_GLFW CONFIGURE_DEPENDS 
    "${LIBGUI_LIBRARIES}/glfw/*.c"
    "${LIBGUI_LIBRARIES}/glfw/*.cpp"
)

FILE(GLOB_RECURSE LIBGUI_LIB_SOURCE_GLAD CONFIGURE_DEPENDS 
    "${LIBGUI_LIBRARIES}/glad/*.c"
    "${LIBGUI_LIBRARIES}/glad/*.cpp"
)

SET(LIBGUI_LIB_SOURCE_IMGUI
    "${LIBGUI_LIBRARIES}/imgui/imgui/imgui.cpp"
    "${LIBGUI_LIBRARIES}/imgui/imgui/imgui_demo.cpp"
    "${LIBGUI_LIBRARIES}/imgui/imgui/imgui_draw.cpp"
    "${LIBGUI_LIBRARIES}/imgui/imgui/imgui_tables.cpp"
    "${LIBGUI_LIBRARIES}/imgui/imgui/imgui_widgets.cpp"
    "${LIBGUI_LIBRARIES}/imgui/imgui/misc/cpp/imgui_stdlib.cpp"
    "${LIBGUI_LIBRARIES}/imgui/imgui/backends/imgui_impl_glfw.cpp"
    "${LIBGUI_LIBRARIES}/imgui/imgui/backends/imgui_impl_opengl2.cpp"
    "${LIBGUI_LIBRARIES}/imgui/imgui/backends/imgui_impl_opengl3.cpp"
)

#SET(LIBGUI_LIB_SOURCE_IMGUI_OPENGL2
#    "${LIBGUI_LIBRARIES}/imgui/imgui/imgui.cpp"
#    "${LIBGUI_LIBRARIES}/imgui/imgui/imgui_demo.cpp"
#    "${LIBGUI_LIBRARIES}/imgui/imgui/imgui_draw.cpp"
#    "${LIBGUI_LIBRARIES}/imgui/imgui/imgui_tables.cpp"
#    "${LIBGUI_LIBRARIES}/imgui/imgui/imgui_widgets.cpp"
#    "${LIBGUI_LIBRARIES}/imgui/imgui/misc/cpp/imgui_stdlib.cpp"
#    "${LIBGUI_LIBRARIES}/imgui/imgui/backends/imgui_impl_glfw.cpp"
#    "${LIBGUI_LIBRARIES}/imgui/imgui/backends/imgui_impl_opengl2.cpp"
#)
#
#SET(LIBGUI_LIB_SOURCE_IMGUI_OPENGL3
#    "${LIBGUI_LIBRARIES}/imgui/imgui/imgui.cpp"
#    "${LIBGUI_LIBRARIES}/imgui/imgui/imgui_demo.cpp"
#    "${LIBGUI_LIBRARIES}/imgui/imgui/imgui_draw.cpp"
#    "${LIBGUI_LIBRARIES}/imgui/imgui/imgui_tables.cpp"
#    "${LIBGUI_LIBRARIES}/imgui/imgui/imgui_widgets.cpp"
#    "${LIBGUI_LIBRARIES}/imgui/imgui/misc/cpp/imgui_stdlib.cpp"
#    "${LIBGUI_LIBRARIES}/imgui/imgui/backends/imgui_impl_glfw.cpp"
#    "${LIBGUI_LIBRARIES}/imgui/imgui/backends/imgui_impl_opengl3.cpp"
#)

FILE(GLOB_RECURSE LIBGUI_SOURCE CONFIGURE_DEPENDS 
    "libgui/*.c"
    "libgui/*.cpp"
)

ADD_LIBRARY(libgui STATIC
    ${LIBGUI_LIB_SOURCE_GLFW}
    ${LIBGUI_LIB_SOURCE_GLAD}
    ${LIBGUI_LIB_SOURCE_IMGUI}
    ${LIBGUI_SOURCE}
)

TARGET_INCLUDE_DIRECTORIES(libgui PUBLIC  "${CMAKE_CURRENT_SOURCE_DIR}/libgui")
TARGET_INCLUDE_DIRECTORIES(libgui PUBLIC  "${LIBGUI_LIBRARIES}")
TARGET_INCLUDE_DIRECTORIES(libgui PUBLIC  "${LIBGUI_LIBRARIES}/glfw")
TARGET_INCLUDE_DIRECTORIES(libgui PUBLIC  "${LIBGUI_LIBRARIES}/glad")
TARGET_INCLUDE_DIRECTORIES(libgui PUBLIC  "${LIBGUI_LIBRARIES}/imgui")
TARGET_INCLUDE_DIRECTORIES(libgui PRIVATE "${LIBGUI_LIBRARIES}/stb")
TARGET_INCLUDE_DIRECTORIES(libgui PRIVATE "${LIBGUI_LIBRARIES}/pfd")
TARGET_INCLUDE_DIRECTORIES(libgui PUBLIC  "${LIBGUI_LIBRARIES}/khr")
TARGET_INCLUDE_DIRECTORIES(libgui PUBLIC  "${LIBGUI_LIBRARIES}/eventpp")
TARGET_INCLUDE_DIRECTORIES(libgui PUBLIC  "${LIBGUI_LIBRARIES}/asio")
TARGET_INCLUDE_DIRECTORIES(libgui PUBLIC  "${LIBGUI_LIBRARIES}/asio/asio")

IF(MSVC)
    TARGET_LINK_LIBRARIES(libgui PUBLIC libutil)
    TARGET_LINK_LIBRARIES(libgui PUBLIC opengl32)
    TARGET_LINK_LIBRARIES(libgui PUBLIC "winmm.lib")

    TARGET_COMPILE_DEFINITIONS(libgui PUBLIC  -D_GLFW_WIN32)
    TARGET_COMPILE_DEFINITIONS(libgui PRIVATE -D_CRT_SECURE_NO_WARNINGS)
    TARGET_COMPILE_DEFINITIONS(libgui PUBLIC  -DIMGUI_DEFINE_MATH_OPERATORS)
    TARGET_COMPILE_DEFINITIONS(libgui PUBLIC  -DIMGUI_IMPL_OPENGL_LOADER_CUSTOM)
    TARGET_COMPILE_DEFINITIONS(libgui PUBLIC  -DSTB_IMAGE_IMPLEMENTATION)
    TARGET_COMPILE_DEFINITIONS(libgui PUBLIC  -DGLAD_GLAPI_EXPORT)
    TARGET_COMPILE_DEFINITIONS(libgui PUBLIC  -DGLAD_GLAPI_EXPORT_BUILD)
ENDIF()

#IF(LIBGUI_BUILD_OPENGL2)
#    ADD_LIBRARY(libgui_opengl2 STATIC
#        ${LIBGUI_LIB_SOURCE_GLFW}
#        ${LIBGUI_LIB_SOURCE_IMGUI_OPENGL2}
#        ${LIBGUI_SOURCE}
#    )
#
#    TARGET_INCLUDE_DIRECTORIES(libgui_opengl2 PUBLIC  "${CMAKE_CURRENT_SOURCE_DIR}/libgui")
#    TARGET_INCLUDE_DIRECTORIES(libgui_opengl2 PUBLIC  "${LIBGUI_LIBRARIES}")
#    TARGET_INCLUDE_DIRECTORIES(libgui_opengl2 PRIVATE "${LIBGUI_LIBRARIES}/glfw")
#    TARGET_INCLUDE_DIRECTORIES(libgui_opengl2 PUBLIC  "${LIBGUI_LIBRARIES}/imgui")
#    TARGET_INCLUDE_DIRECTORIES(libgui_opengl2 PRIVATE "${LIBGUI_LIBRARIES}/stb")
#    TARGET_INCLUDE_DIRECTORIES(libgui_opengl2 PRIVATE "${LIBGUI_LIBRARIES}/pfd")
#    TARGET_INCLUDE_DIRECTORIES(libgui_opengl2 PUBLIC  "${LIBGUI_LIBRARIES}/eventpp")
#    TARGET_INCLUDE_DIRECTORIES(libgui_opengl2 PUBLIC  "${LIBGUI_LIBRARIES}/asio")
#    TARGET_INCLUDE_DIRECTORIES(libgui_opengl2 PUBLIC  "${LIBGUI_LIBRARIES}/asio/asio")
#
#    IF(MSVC)
#        TARGET_LINK_LIBRARIES(libgui_opengl2 PUBLIC libutil)
#        TARGET_LINK_LIBRARIES(libgui_opengl2 PUBLIC opengl32)
#        TARGET_LINK_LIBRARIES(libgui_opengl2 PUBLIC "winmm.lib")
#
#        #TARGET_COMPILE_DEFINITIONS(libgui_opengl2 PUBLIC  -D_WIN32_WINNT=0x0601)
#        TARGET_COMPILE_DEFINITIONS(libgui_opengl2 PUBLIC  -D_GLFW_WIN32)
#        TARGET_COMPILE_DEFINITIONS(libgui_opengl2 PRIVATE -D_CRT_SECURE_NO_WARNINGS)
#        TARGET_COMPILE_DEFINITIONS(libgui_opengl2 PUBLIC  -DIMGUI_DEFINE_MATH_OPERATORS)
#        TARGET_COMPILE_DEFINITIONS(libgui_opengl2 PUBLIC  -DSTB_IMAGE_IMPLEMENTATION)
#        TARGET_COMPILE_DEFINITIONS(libgui_opengl2 PUBLIC  -DLIBGUI_OPENGL2)
#    ENDIF()
#ENDIF()

#IF(LIBGUI_BUILD_OPENGL3)
#    ADD_LIBRARY(libgui_opengl3 STATIC
#        ${LIBGUI_LIB_SOURCE_GLAD}
#        ${LIBGUI_LIB_SOURCE_GLFW}
#        ${LIBGUI_LIB_SOURCE_IMGUI_OPENGL3}
#        ${LIBGUI_SOURCE}
#    )
#
#    TARGET_INCLUDE_DIRECTORIES(libgui_opengl3 PUBLIC  "${CMAKE_CURRENT_SOURCE_DIR}/libgui")
#    TARGET_INCLUDE_DIRECTORIES(libgui_opengl3 PUBLIC  "${LIBGUI_LIBRARIES}")
#    TARGET_INCLUDE_DIRECTORIES(libgui_opengl3 PRIVATE "${LIBGUI_LIBRARIES}/glfw")
#    TARGET_INCLUDE_DIRECTORIES(libgui_opengl3 PRIVATE "${LIBGUI_LIBRARIES}/glad")
#    TARGET_INCLUDE_DIRECTORIES(libgui_opengl3 PUBLIC  "${LIBGUI_LIBRARIES}/imgui")   
#    TARGET_INCLUDE_DIRECTORIES(libgui_opengl3 PRIVATE "${LIBGUI_LIBRARIES}/stb")
#    TARGET_INCLUDE_DIRECTORIES(libgui_opengl3 PRIVATE "${LIBGUI_LIBRARIES}/pfd")
#    TARGET_INCLUDE_DIRECTORIES(libgui_opengl3 PRIVATE "${LIBGUI_LIBRARIES}/khr")
#    TARGET_INCLUDE_DIRECTORIES(libgui_opengl3 PUBLIC  "${LIBGUI_LIBRARIES}/eventpp")
#    TARGET_INCLUDE_DIRECTORIES(libgui_opengl3 PUBLIC  "${LIBGUI_LIBRARIES}/asio")
#    TARGET_INCLUDE_DIRECTORIES(libgui_opengl3 PUBLIC  "${LIBGUI_LIBRARIES}/asio/asio")
#
#    IF(MSVC)
#        TARGET_LINK_LIBRARIES(libgui_opengl3 PUBLIC libutil)
#        TARGET_LINK_LIBRARIES(libgui_opengl3 PUBLIC "winmm.lib")
#
#        #TARGET_COMPILE_DEFINITIONS(libgui_opengl3 PUBLIC  -D_WIN32_WINNT=0x0601)
#        TARGET_COMPILE_DEFINITIONS(libgui_opengl3 PUBLIC  -D_GLFW_WIN32)
#        TARGET_COMPILE_DEFINITIONS(libgui_opengl3 PRIVATE -D_CRT_SECURE_NO_WARNINGS)
#        TARGET_COMPILE_DEFINITIONS(libgui_opengl3 PUBLIC  -DIMGUI_IMPL_OPENGL_LOADER_CUSTOM)
#        TARGET_COMPILE_DEFINITIONS(libgui_opengl3 PUBLIC  -DIMGUI_DEFINE_MATH_OPERATORS)
#        TARGET_COMPILE_DEFINITIONS(libgui_opengl3 PUBLIC  -DGLAD_GLAPI_EXPORT)
#        TARGET_COMPILE_DEFINITIONS(libgui_opengl3 PUBLIC  -DGLAD_GLAPI_EXPORT_BUILD)
#        TARGET_COMPILE_DEFINITIONS(libgui_opengl3 PUBLIC  -DSTB_IMAGE_IMPLEMENTATION)
#        TARGET_COMPILE_DEFINITIONS(libgui_opengl3 PUBLIC  -DLIBGUI_OPENGL3)
#    ENDIF()
#ENDIF()
